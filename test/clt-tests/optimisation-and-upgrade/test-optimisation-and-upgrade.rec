––– block: ../base/start-searchd –––
––– input –––
apt-get update -y > /dev/null; echo $?
––– output –––
0
––– input –––
apt-get install -y bc > /dev/null; echo $?
––– output –––
debconf: delaying package configuration, since apt-utils is not installed
0
––– input –––
chmod +x ./test/clt-tests/optimisation-and-upgrade/load_names_attr.php > /dev/null; echo $?
––– output –––
0
––– input –––
php -d memory_limit=2G ./test/clt-tests/optimisation-and-upgrade/load_names_attr.php 100000 4 2000000 1 2G 1 > /dev/null; echo $?
––– output –––
0
––– input –––
mysql -h0 -P9306 -e "FLUSH RAMCHUNK name;"
––– output –––
––– input –––
mysql -h0 -P9306 -e "SELECT COUNT(*) FROM name;"
––– output –––
+----------+
| count(*) |
+----------+
|  2000000 |
+----------+
––– input –––
php -d memory_limit=2G ./test/clt-tests/optimisation-and-upgrade/load_names_attr.php 100000 4 2000000 1 2G 2000001 > /dev/null; echo $?
––– output –––
0
––– input –––
mysql -h0 -P9306 -e "FLUSH RAMCHUNK name;"
––– output –––
––– input –––
mysql -h0 -P9306 -e "SELECT COUNT(*) FROM name;"
––– output –––
+----------+
| count(*) |
+----------+
|  4000000 |
+----------+
––– input –––
rm -f /var/log/manticore/searchd.log; searchd --stopwait > /dev/null; searchd; if timeout 10 grep -qm1 '\[BUDDY\] started' <(tail -n 1000 -f /var/log/manticore/searchd.log); then echo 'Buddy started!'; else echo 'Timeout or failed!'; cat /var/log/manticore/searchd.log;fi
––– output –––
Manticore %{SEMVER} %{COMMITDATE}#!/(\sdev)?\s/!#(columnar %{SEMVER} %{COMMITDATE}) (secondary %{SEMVER} %{COMMITDATE}) (knn %{SEMVER} %{COMMITDATE})
Copyright (c) 2001-2016, Andrew Aksyonoff
Copyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)
Copyright (c) 2017-%{YEAR}, Manticore Software LTD (https://manticoresearch.com)
[#!/[0-9]{2}:[0-9]{2}.[0-9]{3}/!#] [#!/[0-9]+/!#] using config file '/etc/manticoresearch/manticore.conf' (%{NUMBER} chars)...
starting daemon version '%{SEMVER} %{COMMITDATE}#!/(\sdev)?\s/!#(columnar %{SEMVER} %{COMMITDATE}) (secondary %{SEMVER} %{COMMITDATE}) (knn %{SEMVER} %{COMMITDATE})' ...
listening on %{IPADDR}:9312 for sphinx and http(s)
listening on %{IPADDR}:9306 for mysql
listening on %{IPADDR}:9308 for sphinx and http(s)
precaching table 'name'
precached 1 tables in #!/[0-9]{1}.[0-9]{3}/!# sec
Buddy started!
––– input –––
mysql -h0 -P9306 -e "SHOW TABLES;"
––– output –––
+-------+------+
| Index | Type |
+-------+------+
| name  | rt   |
+-------+------+
––– input –––
mysql -h0 -P9306 -e "show table name status like '%chunk%';"
––– output –––
+--------------------------+-------+
| Variable_name            | Value |
+--------------------------+-------+
| ram_chunk                | 0     |
| ram_chunk_segments_count | 0     |
| disk_chunks              | 2     |
+--------------------------+-------+
––– input –––
mysql -h0 -P9306 -e "select * from name limit 5;"
––– output –––
––– input –––
start_optimize=$(date +%s); time mysql -h0 -P9306 -e "OPTIMIZE TABLE name OPTION sync=1, cutoff=1;" &
––– output –––
[%{NUMBER}] %{NUMBER}
––– input –––
sleep 2 && start_update=$(date +%s); time_taken_update=$( { time mysql -h0 -P9306 -e "UPDATE name SET s='b' WHERE id=1;"; } 2>&1 | grep real | awk '{print $2}'); update_duration=$(echo $time_taken_update | awk -F'm' '{ print ($1 * 60) + $2 }'); if [ $(echo "$update_duration > 1" | bc) -eq 1 ]; then echo "FAIL: Update took longer than 1 second!"; exit 1; else echo "Update completed within acceptable time."; fi
––– output –––
Update completed within acceptable time.
––– input –––
mysql -h0 -P9306 -e "SELECT * FROM name WHERE s='b' LIMIT 5;"
––– output –––
––– input –––
start_update=$(date +%s); time_taken_update=$( { time mysql -h0 -P9306 -e "UPDATE name SET s=123 WHERE id=1;"; } 2>&1 | grep real | awk '{print $2}'); update_duration=$(echo $time_taken_update | awk -F'm' '{ print ($1 * 60) + $2 }'); if [ $(echo "$update_duration > 1" | bc) -eq 1 ]; then echo "FAIL: Update took longer than 1 second!"; exit 1; else echo "Update completed within acceptable time."; fi
––– output –––
Update completed within acceptable time.
––– input –––
mysql -h0 -P9306 -e "SELECT * FROM name WHERE s='b' LIMIT 5;"
––– output –––
––– input –––
start_update=$(date +%s); time_taken_update=$( { time mysql -h0 -P9306 -e "UPDATE name SET s='b' WHERE id > 0;"; } 2>&1 | grep real | awk '{print $2}'); update_duration=$(echo $time_taken_update | awk -F'm' '{ print ($1 * 60) + $2 }'); if [ $(echo "$update_duration > 2" | bc) -eq 1 ]; then echo "FAIL: Update took longer than 2 seconds!"; false; else echo "Update completed within acceptable time."; fi
––– output –––
Update completed within acceptable time.
––– input –––
mysql -h0 -P9306 -e "SELECT * FROM name WHERE s='b' LIMIT 5;"
––– output –––
––– input –––
start_update=$(date +%s); time_taken_update=$( { time mysql -h0 -P9306 -e "UPDATE name SET unknown='b' WHERE id=1;"; } 2>&1 | grep real | awk '{print $2}'); update_duration=$(echo $time_taken_update | awk -F'm' '{ print ($1 * 60) + $2 }'); if [ $(echo "$update_duration > 1" | bc) -eq 1 ]; then echo "FAIL: Update took longer than 1 second!"; exit 1; else echo "Update completed within acceptable time."; fi
––– output –––
Update completed within acceptable time.
––– input –––
wait > /dev/null 2>&1; end_optimize=$(date +%s); optimize_duration=$((end_optimize - start_optimize)); echo "OPTIMIZE duration: $optimize_duration seconds"
––– output –––
real	#!/[0-9]{1}m[0-9]{1,2}.[0-9]{3}s/!#
user	#!/[0-9]{1}m[0-9]{1,2}.[0-9]{3}s/!#
sys	#!/[0-9]{1}m[0-9]{1,2}.[0-9]{3}s/!#
OPTIMIZE duration: %{NUMBER} seconds
